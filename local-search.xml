<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux目录树</title>
    <link href="/2025/10/28/Linux%E7%9B%AE%E5%BD%95%E6%A0%91/"/>
    <url>/2025/10/28/Linux%E7%9B%AE%E5%BD%95%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>Linux目录树，梳理一下。</p><span id="more"></span><h4 id="简版"><a href="#简版" class="headerlink" title="简版"></a>简版</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs txt">/  <br>├── bin      <br>├── boot     <br>├── dev      <br>├── etc      <br>├── home     <br>│   ├── 用户1<br>│   ├── 用户2<br>├── lib      <br>├── root     <br>├── sbin     <br>├── tmp      <br>├── usr      <br>│   ├── bin<br>│   ├── lib<br>│   ├── local<br>│   └── sbin<br>├── var      <br>│   ├── log<br>│   ├── mail<br>│   ├── spool<br>│   └── tmp<br></code></pre></td></tr></table></figure><h4 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs txt">/  <br>├── bin      <br>│   —— binaries：Essential command binaries  <br>│   —— 存放系统常用命令的二进制文件，如 ls、cp、mv 等  <br>│   —— 这些命令主要用于系统启动或单用户模式下的基本操作，通常为所有用户可用。  <br>│   —— /bin 下的命令是系统运行的基础，即使没有挂载其他文件系统也能正常工作。  <br>│   —— 在现代 Linux 中，部分发行版已将 /bin 合并到 /usr/bin，但传统结构仍然广泛使用。  <br>├── boot     <br>│   —— boot：Boot loader files  <br>│   —— 启动文件夹，存放启动 Linux 所需的文件，如内核 vmlinuz、引导加载器 grub  <br>│   —— 包含引导加载器（如 GRUB、LILO）及内核所需文件，是系统启动的关键目录。  <br>│   —— 一般只在系统启动时需要访问，正常使用时很少变动。  <br>├── dev      <br>│   —— devices：Device files  <br>│   —— 设备文件目录，如硬盘、终端等都以文件方式存在这里  <br>│   —— 通过设备文件，用户和程序可以像操作普通文件一样操作硬件设备。  <br>│   —— 该目录下文件都是由内核和 udev 动态生成，不占用实际磁盘空间。  <br>├── etc      <br>│   —— etcetera (configuration)：Configuration files  <br>│   —— 系统配置文件目录，大多数服务和程序的配置都在这里  <br>│   —— 包括网络、用户、服务等配置文件，如 passwd、hosts、fstab、ssh 配置等。  <br>│   —— 该目录的内容经常需要备份和维护，确保系统稳定运行。  <br>├── home     <br>│   —— home：User home directories  <br>│   —— 普通用户的主目录，每个用户一个子文件夹，如 /home/yourname  <br>│   —— 用户的个人文件、设置、下载等都保存在这里。  <br>│   —— 是用户日常使用和数据存储的主要目录。  <br>├── lib      <br>│   —— libraries：Essential shared libraries  <br>│   —— 系统运行所需的共享库文件和内核模块  <br>│   —— 包含为 /bin 和 /sbin 目录下程序提供支持的基本库文件，如 libc.so  <br>│   —— 还包括一些内核模块（通常在 /lib/modules 下），是系统正常运行的基础。  <br>├── media    <br>│   —— media：Removable media mount points  <br>│   —— 可移动设备挂载点，如 U 盘、光盘  <br>│   —— 系统自动识别并挂载外部存储设备时，挂载点会出现在该目录。  <br>│   —— 用户插入设备后，可在此目录下访问其内容。  <br>├── mnt      <br>│   —— mount：Temporary mount points  <br>│   —— 临时挂载文件系统用的挂载点  <br>│   —— 通常由管理员手动挂载临时文件系统或设备时使用。  <br>│   —— 该目录下内容一般是临时存在，不建议长期存放数据。  <br>├── opt      <br>│   —— optional：Optional application software  <br>│   —— 可选的软件包安装目录，第三方软件常安装在这里  <br>│   —— 一些大型商业软件或附加组件会选择安装在 /opt 下，便于统一管理和卸载。  <br>│   —— 目录结构一般为 /opt/软件名，方便区分和维护。  <br>├── proc     <br>│   —— process (process information)：Process and kernel information  <br>│   —— 虚拟文件系统，显示当前系统进程和内核信息  <br>│   —— /proc 下的文件和目录由内核动态生成，实时反映系统状态。  <br>│   —— 常用于排查系统性能、进程资源占用等问题。  <br>├── root     <br>│   —— root (root user&#x27;s home)：Root user’s home directory  <br>│   —— 系统管理员（root 用户）的主目录  <br>│   —— 仅 root 用户拥有完全权限，建议普通用户不要在此目录下操作。  <br>│   —— 存放 root 用户的个人文件和配置。  <br>├── run      <br>│   —— run (runtime data)：Application runtime data  <br>│   —— 存放系统运行时数据（自 Linux 2.6.29 起）  <br>│   —— 包括进程 PID 文件、服务运行时状态等临时数据，系统重启后会清空。  <br>│   —— 取代了早期的 /var/run，提供更一致的运行时数据管理。  <br>├── sbin     <br>│   —— system binaries：System administration binaries  <br>│   —— 系统管理员使用的二进制文件，如管理命令 ifconfig、reboot 等  <br>│   —— 一般只有 root 用户或具备管理员权限的用户才能执行这些命令。  <br>│   —— 包括系统维护、修复、网络管理等常用工具。  <br>├── srv      <br>│   —— service：Data for services provided  <br>│   —— 服务数据目录，存放服务产生的数据，如 web、ftp 等  <br>│   —— 用于保存由系统服务（如 HTTP、FTP）对外提供的数据。  <br>│   —— 比如 /srv/www 存放网页数据，/srv/ftp 存放 FTP 文件。  <br>├── sys      <br>│   —— system (kernel information)：System and kernel information  <br>│   —— 用于显示和交互内核信息的虚拟文件系统  <br>│   —— 与 /proc 类似，/sys 由内核动态生成，反映硬件设备和内核参数。  <br>│   —— 允许用户和应用程序通过文件系统接口与内核交互。  <br>├── tmp      <br>│   —— temporary：Temporary files  <br>│   —— 临时文件目录，任何用户都可访问，定期会被清空  <br>│   —— 用于存放临时数据，如程序临时缓存、下载解压文件等。  <br>│   —— 系统重启或定期维护时会自动清理该目录内容。  <br>├── usr      <br>│   —— user (user programs)：User programs and 数据  <br>│   —— 用户程序目录，包含许多应用程序和文件  <br>│   —— 这是系统中体积较大的目录之一，包含大多数用户级应用程序和资源，而不是系统引导或运行必需的内容。  <br>│   —— 一般来说，/usr 下的内容是只读的，只有在系统升级或安装新软件时才会变动。  <br>│   ├── bin      <br>│   │   —— binaries：User command binaries  <br>│   │   —— 普通用户可用的命令二进制文件，如 gcc、vim、python 等  <br>│   ├── lib      <br>│   │   —— libraries：User shared libraries  <br>│   │   —— 为 /usr/bin 及 /usr/sbin 中程序提供的共享库文件  <br>│   ├── local    <br>│   │   —— local：Local software installations  <br>│   │   —— 本地安装的软件，通常是用户自己编译或安装的第三方应用，不受系统包管理器控制  <br>│   └── sbin     <br>│       —— system binaries：User system binaries  <br>│       —— 用户级的系统管理命令，一般只有管理员才能使用  <br>├── var      <br>│   —— variable (variable files)：Variable files (logs, cache, etc)  <br>│   —— 经常变化的文件，如日志、缓存、邮件、锁文件等  <br>│   —— 包含系统运行过程中需要频繁写入的数据，如 /var/log、/var/spool、/var/tmp 等。  <br>│   —— 该目录下的内容随系统运行和服务变化而不断更新，需定期清理和备份。  <br>│   ├── log <br>│   │   —— log (log files)：System log files  <br>│   │   —— 系统日志文件目录，如 syslog、dmesg、auth.log 等  <br>│   ├── mail<br>│   │   —— mail (mail spool)：System mail storage <br>│   │   —— 系统邮件存储目录，保存用户或系统邮件  <br>│   ├── spool    <br>│   │   —— spool (service spool)：Service queue files   <br>│   │   —— 服务队列目录，如打印任务、邮件队列等  <br>│   └── tmp      <br>│       —— tmp (temporary files)：Temporary files for applications      <br>│       —— 程序运行时产生的临时文件目录，系统定期或重启时会清空  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>凯撒密码现实应用</title>
    <link href="/2025/10/09/%E5%AF%86%E7%A0%81%E5%BB%BA%E8%AE%AE/"/>
    <url>/2025/10/09/%E5%AF%86%E7%A0%81%E5%BB%BA%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>我说这密码简单又复杂你2龙吗！</p><span id="more"></span><h2 id="凯撒密码简介"><a href="#凯撒密码简介" class="headerlink" title="凯撒密码简介"></a>凯撒密码简介</h2><p>​凯撒密码（Caesar Cipher）是一种历史悠久的古典加密方法，最早由古罗马将军凯撒用于军事通信。这种加密方式通过将字母表中的每个字母按固定偏移量轮换，来实现明文到密文的转换。例如，若偏移量为3，则A变为D，B变为E，依此类推。由于其加密和解密过程简单、实现容易，凯撒密码广泛用于密码学入门教学，但其安全性较低，容易被频率分析等手段破解。</p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><hr><p>​最近在学应用密码学，古典密码，然后突然想到这玩意（指凯撒密码）可以用来设置简单又复杂的密码（认真脸.jpg），于是写到blog里。</p><p>​具体的思路是，根据不同的网站&#x2F;应用，来确定一段文本，然后再自己寻找一段文本（最好是中文，因为中文偏移之后你大概率也猜不到这玩意说的是什么，但是你自己知道这个到底讲的是什么，比如wsnjsgdbd——我说你就是个大笨蛋，正常人就算会穷举也看不出来这玩意说的到底是什么）</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><hr><p>​话不多说，直接把python脚本贴出来，只是一个设置密码的思路，具体怎么实现还是由你决定，毕竟密码要你保管（物理级别的密码本），设置的再厉害，自身安全意识不够早晚被社工打败（bushi）</p><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">caesar_shift</span>(<span class="hljs-params">text, k</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= ch &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:<br>            result += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) + k) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt;= ch &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>:<br>            result += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) + k) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            result += ch<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invert_bin</span>(<span class="hljs-params">bin_str</span>):<br>    <span class="hljs-comment"># 5位二进制取反</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> bin_str)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    special_chars = [<span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== 密码生成器 ===&quot;</span>)<br>    website = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入网站英文名: &quot;</span>).strip()<br>    sentence = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入偏移用的句子的首字母: &quot;</span>).strip()<br>    <span class="hljs-keyword">try</span>:<br>        k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入偏移量k（0~31）: &quot;</span>).strip())<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt;= k &lt; <span class="hljs-number">32</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;偏移量k应在0~31之间&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;偏移量k无效！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    bin_k = <span class="hljs-built_in">format</span>(k, <span class="hljs-string">&quot;05b&quot;</span>)<br>    invert_k = invert_bin(bin_k)<br>    symbol = special_chars[k % <span class="hljs-number">10</span>]<br>    website_cap = website.capitalize()<br>    sentence_cap = sentence.capitalize()<br>    combined = website_cap + sentence_cap<br>    shifted = caesar_shift(combined, k)<br>    password = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;symbol&#125;</span><span class="hljs-subst">&#123;shifted&#125;</span><span class="hljs-subst">&#123;invert_k&#125;</span>&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;生成的密码：<span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>​具体思路就是，输入你登录的网站名&#x2F;应用名，然后输入一串你不知道从哪弄来的文本（最好是实体书，保存好），然后随便挑个句子，摘出它的首字母（具体摘抄什么随你，正序倒序都可以），然后输入进去，随便选个偏移量（0到31，因为我设置的5位二进制），然后就可以获得密码。前缀会以!开始，凭以下的字符偏转获得前缀。并且在最后加上偏移量的二进制表示形式的按位取反（比如00001，得到的是11110）。最终获得密码。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">!@#$<span class="hljs-comment">%^&amp;*()</span><br></code></pre></td></tr></table></figure><p>​</p><p>​比如说你输入jingdong（jd打钱！），输入一串wsnjsgdbd，然后输入偏移量k，随便输一个，14，然后得到结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">=== 密码生成器 ===</span><br>请输入网站英文名: jingdong<br>请输入偏移用的句子的首字母: wsnjsgdbd<br>请输入偏移量k（0~31）: 14<br>生成的密码：%XwburcbuKgbxgurpr10001<br></code></pre></td></tr></table></figure><p>​喏，密码得到了，具体怎么记忆，非常简单的吧，记住一个应用名（根本不用记），记住你常用的那个句子，记住偏移量（记不住直接写本子上，其他人得疯狂排列组合才能猜到你的密码，有这闲工夫不如直接问你密码怎么设置的，这也是一种社工.jpg），就大功告成了~</p><p>​ok，就写到这里先，还要去work work，继续加油。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再试一次</title>
    <link href="/2025/10/08/25.10.8/"/>
    <url>/2025/10/08/25.10.8/</url>
    
    <content type="html"><![CDATA[<p>​当全世界都要我放弃时，还是希望有人能轻语一声：再试一次。</p><span id="more"></span><p>​Wenn die Welt sagt: “Gib auf!” flustert die Hoffnung ins Ohr: “Versuch es noch mal!”</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello,Linux!</title>
    <link href="/2025/09/29/Hello-Linux/"/>
    <url>/2025/09/29/Hello-Linux/</url>
    
    <content type="html"><![CDATA[<p>基础的Linux命令</p><span id="more"></span><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><p><code>cd</code> <strong>change directory</strong> 更改目录</p><p><code>pwd</code> <strong>print working directory</strong> 显示当前工作目录的绝对路径</p><p><code>ctrl+D / exit</code>从root切换回普通用户</p><p><code>ctrl+L / clear</code>清除终端屏幕(Windows中是cls)</p><p><code>ctrl+W</code> 快速删除一个组 比如binwalk -e 1.jpg  直接ctrl+W删除1.jpg </p><p><code>→</code> 快速补全历史代码</p><p><code>ls</code> <strong>list segments</strong>（“列出片段”或“列出内容”）</p><p><code>ls /</code>查询根目录</p><p><code>ls</code>查询当前目录</p><p><code>ls ../</code>查询父目录</p><p><code>ls -d */</code>列出当前目录下所有文件夹</p><p><code>ctrl+z</code>挂起任务</p><p><code>ctrl+c</code>结束任务</p><p>输入 <code>fg</code>，会把最近一个被暂停的进程恢复到前台继续运行。</p><p>输入 <code>bg</code>，会把最近一个被暂停的进程恢复到后台继续运行。</p><p><code>jobs</code>显示所有被暂停或后台运行的任务（带有编号）。</p><p><code>fg %n</code>恢复第 n 个任务到前台</p><p><code>bg %n</code>恢复第 n 个任务到后台</p><p><code>rm -rf  </code>-r 递归删除，从最里边往外 -f强制删除 </p><p>​? 单个字符 * 任意字符</p><p><code>rm -rf /*</code> 删库跑路</p><p><code>mv</code> 移动文件或者重命名</p><p><code>mv 源文件/目录 目标路径</code> mv file1.txt &#x2F;home&#x2F;user&#x2F;docs&#x2F;</p><p><code>mv 原文件名 新文件名 </code> mv oldname.txt newname.txt</p><p><code>history</code> 查看历史执行命令</p><p><code>ls -l</code> 别名 <code>ll</code> 显示当前目录下文件和文件夹的详细信息（包括权限、所有者、大小、修改时间等）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ls -l` 显示的权限如：`-rwxr-xr--<br></code></pre></td></tr></table></figure><ul><li><strong>读（r）</strong> read、<strong>写（w）</strong> write、<strong>执行（x）</strong> executable</li><li>第一位：<code>-</code>为文件，<code>d</code>为目录</li><li>接下来三位：拥有者权限</li><li>再三位：所属组权限</li><li>最后三位：其他人权限</li></ul><p><code>chmod</code> <strong>change mode</strong> </p><ul><li>用于设置文件或目录的<strong>读（r）</strong>、<strong>写（w）</strong>、<strong>执行（x）</strong> 权限。</li><li>可以针对<strong>所有者（user, u）</strong>、<strong>所属组（group, g）</strong>、<strong>其他人（others, o）</strong> 分别设置权限。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">755</span> file.txt<br></code></pre></td></tr></table></figure><ul><li>7 &#x3D; 4+2+1，表示拥有所有权限（rwx）</li><li>5 &#x3D; 4+1，表示读和执行权限（r-x）</li><li>5 &#x3D; 4+1，表示读和执行权限（r-x）</li></ul><p>即：拥有者可读写执行，组和其他人可读可执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 777 file     <span class="hljs-comment"># 所有人可读写执行</span><br><span class="hljs-built_in">chmod</span> 644 file     <span class="hljs-comment"># 所有者可读写，其他人只读</span><br><span class="hljs-built_in">chmod</span> +x script.sh <span class="hljs-comment"># 增加执行权限</span><br><span class="hljs-built_in">chmod</span> -w file      <span class="hljs-comment"># 去掉所有写权限</span><br><span class="hljs-built_in">chmod</span> u=rwx,g=rx,o= file <span class="hljs-comment"># 详细设置权限</span><br><span class="hljs-built_in">chmod</span> -R 755 <span class="hljs-built_in">dir</span>/  <span class="hljs-comment"># 递归设置目录及其下所有文件权限</span><br></code></pre></td></tr></table></figure><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a><a href="https://blog.csdn.net/weixin_58849785/article/details/137153298">vim使用</a></h2><p><strong>vim打开文件为普通模式，普通模式下输入（i、a、o）进入插入模式。</strong></p><p><strong>插入模式下按 Esc键进入普通模式</strong></p><p><strong>普通模式下输入 ：进入末行模式</strong></p><p><strong>插入模式和末行模式不能直接切换</strong></p><p>普通模式主要操作：删除、复制、粘贴</p><p>编辑模式主要操作：编辑文本</p><p>末行模式主要操作：退出保存</p><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a><strong>普通模式</strong></h3><p>键盘上下左右控制光标移动</p><p>0     $ 分别表示，光标跳到所在行的行首和行尾</p><p>gg   G 分别表示，光标跳到首行和尾行</p><p>y  n（n表示复制当前光标下几行内容）复制光标所在行内容</p><p>yy    复制光标所在行内容（以行为单位）</p><p>d  n  删除（删除当前光标下n行）</p><p>dd    删除当前光标所在行（以行为单位）</p><p>p粘贴</p><p>u撤销（撤销操作）</p><p>注意：以上操作需要在普通模式下</p><h3 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a><strong>末行模式</strong></h3><p>:w 保存文件</p><p>:q 退出文件</p><p>:wq 保存并退出文件</p><p>:w! 强制保存文件</p><p>:q!强制退出文件</p><p>:wq! 强制保存并退出文件</p><p>:w 1.txt 将文件另存到1.txt </p><p>:1,3 w 1.txt 将1-3行内容另存到1.txt  </p><p>:r 2.txt 将2.txt文件内容写入到该文件光标所在行中</p><p>:5 r 2.txt 将2.txt文件内容写入到该文件第5行后</p><h1 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h1><p><code>scp</code> 是 Linux&#x2F;Unix 下用来<strong>安全地复制文件</strong>（Secure Copy）的命令，基于 SSH 协议。它可以在本地和远程主机之间或两台远程主机之间复制文件和目录。</p><hr><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp [参数] 源文件 目标路径<br></code></pre></td></tr></table></figure><hr><h2 id="2-常用场景举例"><a href="#2-常用场景举例" class="headerlink" title="2. 常用场景举例"></a>2. 常用场景举例</h2><h3 id="从本地复制文件到远程主机"><a href="#从本地复制文件到远程主机" class="headerlink" title="从本地复制文件到远程主机"></a>从本地复制文件到远程主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp localfile.txt user@remotehost:/home/user/<br></code></pre></td></tr></table></figure><p>把本地的 <code>localfile.txt</code> 拷贝到远程主机的 <code>/home/user/</code> 目录下。</p><h3 id="从远程主机复制文件到本地"><a href="#从远程主机复制文件到本地" class="headerlink" title="从远程主机复制文件到本地"></a>从远程主机复制文件到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp user@remotehost:/home/user/remotefile.txt /local/path/<br></code></pre></td></tr></table></figure><p>把远程主机上的 <code>remotefile.txt</code> 拷贝到本地 <code>/local/path/</code> 目录。</p><h3 id="复制整个目录（加-r-参数）"><a href="#复制整个目录（加-r-参数）" class="headerlink" title="复制整个目录（加 -r 参数）"></a>复制整个目录（加 <code>-r</code> 参数）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r /local/dir user@remotehost:/home/user/<br></code></pre></td></tr></table></figure><p>递归复制本地目录 <code>/local/dir</code> 到远程主机。</p><h3 id="指定端口号（加-P-参数，注意是大写）"><a href="#指定端口号（加-P-参数，注意是大写）" class="headerlink" title="指定端口号（加 -P 参数，注意是大写）"></a>指定端口号（加 <code>-P</code> 参数，注意是大写）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -P 2222 localfile.txt user@remotehost:/home/user/<br></code></pre></td></tr></table></figure><p>端口是 2222 时的写法。</p><hr><h2 id="3-常用参数"><a href="#3-常用参数" class="headerlink" title="3. 常用参数"></a>3. 常用参数</h2><ul><li><code>-r</code>：递归复制整个目录</li><li><code>-P</code>：指定远程主机 SSH 端口号（大写）</li><li><code>-p</code>：保留原文件的修改时间、访问时间和权限</li><li><code>-C</code>：传输时启用压缩，提高速度</li><li><code>-q</code>：安静模式，不显示传输进度</li></ul><hr><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ul><li>必须有远程主机的 SSH 权限</li><li>支持密钥登录，推荐用密钥认证而不是密码</li><li>远程路径可以是绝对路径或相对路径</li></ul><hr><h2 id="5-典型用法总结"><a href="#5-典型用法总结" class="headerlink" title="5. 典型用法总结"></a>5. 典型用法总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp file.txt user@192.168.1.2:/home/user/    <span class="hljs-comment"># 本地-&gt;远程</span><br>scp user@192.168.1.2:/home/user/file.txt ./  <span class="hljs-comment"># 远程-&gt;本地</span><br>scp -r <span class="hljs-built_in">dir</span>/ user@host:/path/                 <span class="hljs-comment"># 复制目录</span><br>scp -P 2222 file user@host:/path/            <span class="hljs-comment"># 指定端口</span><br></code></pre></td></tr></table></figure><hr><h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1><hr><p>要让 zsh 的 history 显示时间戳对<strong>全部用户生效</strong>，可以将相关配置写到<strong>全局 zsh 配置文件</strong>，而不是只写到个人的 <code>~/.zshrc</code>。</p><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><ol><li><p><strong>编辑全局 zsh 配置文件</strong></p><p>常见位置有：</p><ul><li><code>/etc/zsh/zshrc</code></li><li><code>/etc/zshrc</code></li><li>某些发行版也可能用 <code>/etc/zsh/zprofile</code> 或 <code>/etc/profile</code></li></ul></li><li><p><strong>添加时间戳配置</strong></p><p>比如在 <code>/etc/zsh/zshrc</code> 文件末尾添加：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">HIST_STAMPS=<span class="hljs-string">&quot;yyyy-mm-dd&quot;</span><br></code></pre></td></tr></table></figure><p>或者，如果你喜欢自定义格式：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">export</span> HISTTIMEFORMAT=<span class="hljs-string">&quot;%F %T &quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>保存文件</strong></p></li><li><p><strong>让全部用户生效</strong></p><ul><li>新开 zsh 终端窗口即可看到效果。</li><li>对所有用 zsh 的用户都生效（除非个人 <code>~/.zshrc</code> 里覆盖了该变量）。</li></ul></li></ol><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>需要<strong>root权限</strong>编辑 <code>/etc/zsh/zshrc</code>（如：<code>sudo nano /etc/zsh/zshrc</code>）。</li><li>个人用户可以用自己的 <code>~/.zshrc</code> 覆盖全局设置。</li><li>只有 zsh shell 会读取全局 zsh 配置文件。</li></ul><hr><p><strong>结论：</strong><br>将配置写到 <code>/etc/zsh/zshrc</code> 就能让 zsh 的历史时间戳对全部用户生效。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello,Hexo!</title>
    <link href="/2025/09/28/Hello-Hexo/"/>
    <url>/2025/09/28/Hello-Hexo/</url>
    
    <content type="html"><![CDATA[<p>学习Hexo写作</p><span id="more"></span><h1 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello,Hexo!"></a>Hello,Hexo!</h1><h2 id="1-新建一篇文章"><a href="#1-新建一篇文章" class="headerlink" title="1. 新建一篇文章"></a>1. 新建一篇文章</h2><p>在终端进入你的 Hexo 博客根目录，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;你的文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;Hello,Hexo!&quot;</span><br></code></pre></td></tr></table></figure><p>这将在 <code>source/_posts/</code> 文件夹下生成对应的 Markdown 文件。</p><hr><h2 id="2-编辑文章内容"><a href="#2-编辑文章内容" class="headerlink" title="2. 编辑文章内容"></a>2. 编辑文章内容</h2><p>用编辑器打开 <code>source/_posts/你的文章标题.md</code> 文件，使用 Markdown 语法进行书写。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">我的第一篇博客</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-09-28 16:30:00</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">教程</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这是我的第一篇</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">博客！</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-本地预览"><a href="#3-本地预览" class="headerlink" title="3. 本地预览"></a>3. 本地预览</h2><p>在 Hexo 根目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看效果。</p><hr><h2 id="4-清除缓存并生成静态文件"><a href="#4-清除缓存并生成静态文件" class="headerlink" title="4. 清除缓存并生成静态文件"></a>4. 清除缓存并生成静态文件</h2><p>建议每次发布前清理缓存并重新生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br></code></pre></td></tr></table></figure><hr><h2 id="5-部署到-GitHub"><a href="#5-部署到-GitHub" class="headerlink" title="5. 部署到 GitHub"></a>5. 部署到 GitHub</h2><p>确保已经正确配置 <code>_config.yml</code> 里的 deploy 信息，然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><hr><h2 id="6-查看线上博客"><a href="#6-查看线上博客" class="headerlink" title="6. 查看线上博客"></a>6. 查看线上博客</h2><p>几分钟后，访问你的 <a href="https://qianchangeable.github.io/">Github Pages地址</a> 就可以看到新发布的文章啦！</p><hr><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="1-文章头信息（Front-matter）"><a href="#1-文章头信息（Front-matter）" class="headerlink" title="1. 文章头信息（Front-matter）"></a>1. 文章头信息（Front-matter）</h2><p>每篇 Hexo 文章顶部都有三条短横线包裹的一段内容，这就是 Front-matter，用于定义文章标题、日期、标签等属性。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">我的第一篇博客</span>           <span class="hljs-comment"># 文章标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-09-28 16:30:00</span>      <span class="hljs-comment"># 创建日期</span><br><span class="hljs-attr">tags:</span>                          <span class="hljs-comment"># 文章标签</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">教程</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>你可以根据需要添加更多属性（如 author、categories 等）。</p><hr><h2 id="2-使用-设置摘要"><a href="#2-使用-设置摘要" class="headerlink" title="2. 使用 &lt;!--more--&gt; 设置摘要"></a>2. 使用 <code>&lt;!--more--&gt;</code> 设置摘要</h2><p>如果你想让博客首页、分类页等只显示文章的部分内容，可以在正文中插入 <code>&lt;!--more--&gt;</code>，其前面的内容会作为摘要显示。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是文章的摘要部分。<br><br>&lt;!--more--&gt;<br><br>这里是文章的详细内容，只在点击阅读全文后才会显示。<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>&lt;!--more--&gt;</code> 前后的内容之间不要有空格或其它特殊字符。</li><li>这个分隔符可以插在任意你希望“截断”的地方。</li></ul><hr><h2 id="3-设置文章的分类、标签与置顶优先级"><a href="#3-设置文章的分类、标签与置顶优先级" class="headerlink" title="3. 设置文章的分类、标签与置顶优先级"></a>3. 设置文章的分类、标签与置顶优先级</h2><p>你可以在 Front-matter（文章头信息）区域增加如下属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo分类与标签示例</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-09-28 17:00:00</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">教程</span>          <span class="hljs-comment"># 分类（单个或多个）</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span>                  <span class="hljs-comment"># 标签（可多个）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">博客</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">1</span>                  <span class="hljs-comment"># 置顶优先级，数值越大越靠前（需主题支持，如Fluid）</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><ul><li><strong>categories</strong>：用于归类，可以是一个字符串，也可以是数组（如 <code>[&#39;教程&#39;, &#39;进阶&#39;]</code>）。</li><li><strong>tags</strong>：用于细分标签，支持多个。</li><li><strong>sticky</strong>：置顶优先级，数值越大优先级越高。</li></ul><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo分类与标签示例</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-09-28 17:00:00</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">教程</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">博客</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样，你的文章就有了分类、标签，并能在支持置顶功能的主题（如 Fluid）中进行排序显示。</p><hr><h1 id="Hexo写作文档"><a href="#Hexo写作文档" class="headerlink" title="Hexo写作文档"></a>Hexo写作文档</h1><p><a href="https://hexo.io/zh-cn/docs/index.html">文档 | Hexo</a></p><hr><h1 id="Hexo-Fluid用户手册"><a href="#Hexo-Fluid用户手册" class="headerlink" title="Hexo Fluid用户手册"></a>Hexo Fluid用户手册</h1><p><a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid 用户手册</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
